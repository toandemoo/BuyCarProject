// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616175354_update1")]
    partial class update1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Entities.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Toyota"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ford"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Honda"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BMW"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mercedes-Benz"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Chevrolet"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nissan"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hyundai"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kia"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mazda"
                        });
                });

            modelBuilder.Entity("Project.Entities.CarTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("carTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SUV"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hatchback"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Convertible"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Coupe"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pickup"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Minivan"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Crossover"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Wagon"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sports Car"
                        });
                });

            modelBuilder.Entity("Project.Entities.Cars", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("INT")
                        .HasColumnName("BrandId");

                    b.Property<int?>("BrandsId")
                        .HasColumnType("INT");

                    b.Property<int>("CarTypeId")
                        .HasColumnType("INT")
                        .HasColumnName("CarTypeId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnName("ImageUrl");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("LicensePlate");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("PricePerDay");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(20)")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("BrandsId");

                    b.HasIndex("CarTypeId");

                    b.ToTable("cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CarTypeId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "29A-12345",
                            Name = "Toyota Vios",
                            PricePerDay = 500000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CarTypeId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "30B-67890",
                            Name = "Ford Everest",
                            PricePerDay = 800000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CarTypeId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "31C-11111",
                            Name = "Honda Civic",
                            PricePerDay = 600000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 4,
                            CarTypeId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "32D-22222",
                            Name = "BMW X5",
                            PricePerDay = 1500000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 5,
                            CarTypeId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "33E-33333",
                            Name = "Mercedes C300",
                            PricePerDay = 1400000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 6,
                            CarTypeId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "34F-44444",
                            Name = "Chevrolet Colorado",
                            PricePerDay = 700000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 7,
                            CarTypeId = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "35G-55555",
                            Name = "Nissan Navara",
                            PricePerDay = 750000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 8,
                            CarTypeId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "hhttps://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "36H-66666",
                            Name = "Hyundai SantaFe",
                            PricePerDay = 850000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 9,
                            CarTypeId = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "37K-77777",
                            Name = "Kia Morning",
                            PricePerDay = 400000m,
                            Status = "Available"
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 10,
                            CarTypeId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "https://cafefcdn.com/203337114487263232/2024/11/21/scv-white-4-front-left-3601-1732167139690-1732167139799857346954.jpg",
                            LicensePlate = "38L-88888",
                            Name = "Mazda CX-5",
                            PricePerDay = 900000m,
                            Status = "Available"
                        });
                });

            modelBuilder.Entity("Project.Entities.OrderCars", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("INT");

                    b.Property<int>("CarId")
                        .HasColumnType("INT");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SubPrice")
                        .HasColumnType("int");

                    b.HasKey("OrderId", "CarId");

                    b.HasIndex("CarId");

                    b.ToTable("orderCars");
                });

            modelBuilder.Entity("Project.Entities.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATE")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("StatusId")
                        .HasColumnType("INT")
                        .HasColumnName("StatusId");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("TotalPrice");

                    b.Property<int>("UserId")
                        .HasColumnType("INT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("Project.Entities.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("FullName");

                    b.Property<string>("Password")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Password");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int?>("RoleId")
                        .HasColumnType("INT")
                        .HasColumnName("RoleId");

                    b.Property<string>("profileImage")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("profileImage");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Project.Entities.WishList", b =>
                {
                    b.Property<int>("Userid")
                        .HasColumnType("INT");

                    b.Property<int>("Carid")
                        .HasColumnType("INT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("Userid", "Carid");

                    b.HasIndex("Carid");

                    b.ToTable("wishLists");
                });

            modelBuilder.Entity("ProjectBE.Entities.OrderStatus", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("ProjectBE.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("refreshTokens");
                });

            modelBuilder.Entity("ProjectBE.Entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INT")
                        .HasColumnName("Id");

                    b.Property<string>("Role")
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 1,
                            Role = "User"
                        },
                        new
                        {
                            Id = 2,
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("Project.Entities.Cars", b =>
                {
                    b.HasOne("Project.Entities.Brands", "Brands")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Brands", null)
                        .WithMany("Cars")
                        .HasForeignKey("BrandsId");

                    b.HasOne("Project.Entities.CarTypes", "CarTypes")
                        .WithMany("Cars")
                        .HasForeignKey("CarTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brands");

                    b.Navigation("CarTypes");
                });

            modelBuilder.Entity("Project.Entities.OrderCars", b =>
                {
                    b.HasOne("Project.Entities.Cars", "Car")
                        .WithMany("OrderCars")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Orders", "Order")
                        .WithMany("OrderCars")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Project.Entities.Orders", b =>
                {
                    b.HasOne("ProjectBE.Entities.OrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.Entities.Users", b =>
                {
                    b.HasOne("ProjectBE.Entities.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Project.Entities.WishList", b =>
                {
                    b.HasOne("Project.Entities.Cars", "Cars")
                        .WithMany("WishList")
                        .HasForeignKey("Carid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Entities.Users", "Users")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cars");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Project.Entities.Brands", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Project.Entities.CarTypes", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Project.Entities.Cars", b =>
                {
                    b.Navigation("OrderCars");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("Project.Entities.Orders", b =>
                {
                    b.Navigation("OrderCars");
                });
#pragma warning restore 612, 618
        }
    }
}
